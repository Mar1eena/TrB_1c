#Область ПрограммныйИнтерфейс

// Метод получения облигации по её идентификатору
// Параметры:
//  IdType - ПеречислениеСсылка.TrBInstrumentIdType - Тип идентификатора инструмента. Возможные значения: figi, ticker
//  ClassCode - Строка - Идентификатор class_code. Обязателен при id_type = ticker.
//  Idd - Строка - Идентификатор запрашиваемого инструмента.
//  Песочница - Булево - Ложь, если это не песочница.
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция BondBy(IdType, ClassCode, Idd, Песочница = Ложь) Экспорт

	URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.InstrumentsService";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("IdType", IdType);
	ПараметрыТелаЗапроса.Вставить("ClassCode", ClassCode);
	ПараметрыТелаЗапроса.Вставить("Id", Idd);
	
	ТелоЗапроса = "{
					|'IdType': [IdType],
					|'ClassCode': [ClassCode],
					|'Id': [Idd]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Ответ.Содержимое = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Ответ.Содержимое);
	
	Возврат Ответ;
	
КонецФункции

// Функция получения списка облигаций.
// Параметры:
//  InstrumentStatus - ПеречислениеСсылка.TrBItrumentStatus - Статус запрашиваемых инструментов
//  Песочница - Булево - Ложь, если это не песочница.
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция Bonds(InstrumentStatus, Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.InstrumentsService/Bonds";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("instrumentStatus", InstrumentStatus);
	
	ТелоЗапроса = "{
					|InstrumentStatus: [InstrumentStatus]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Ответ.Содержимое = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Ответ.Содержимое);
	
	Возврат Ответ;
	
КонецФункции

// Функция 
// Параметры:
//  
//  Песочница - Булево - Ложь, если это не песочница.
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция ЛюбаяФункци2(Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("", "");
	
	ТелоЗапроса = "";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Ответ.Содержимое = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Ответ.Содержимое);
	
	Возврат Ответ;
	
КонецФункции

// Функция 
// Параметры:
//  
//  Песочница - Булево - Ложь, если это не песочница.
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция ЛюбаяФункци3(Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("", "");
	
	ТелоЗапроса = "";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Ответ.Содержимое = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Ответ.Содержимое);
	
	Возврат Ответ;
	
КонецФункции

// Функция возвращает данные о статусе торговли по инструменты
// Параметры:
//  InstrumentId - Строка - ID инструмента или figi.
//  Песочница - Булево - Ложь, если это не песочница.
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция GetTradingStatuses(InstrumentId, Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatuses";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("instrumentId", instrumentId);
	
	ТелоЗапроса = "	{
					|	'instrumentId': [
					|		[instrumentId]
					|	]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Ответ.Содержимое = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Ответ.Содержимое);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница = Ложь)
	
	Если Песочница Тогда
		Токен = Константы.TrBТокенПесочница.Получить();	
	Иначе
		Токен = Константы.TrBТокен.Получить();
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("accept", "application/json");
	Заголовки.Вставить("Authorization", Токен);
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ФорматОтвета"				, 1);
	ПараметрыЗапроса.Вставить("Метод"						, "POST");
	ПараметрыЗапроса.Вставить("ДанныеДляОбработки"			, ТелоЗапроса);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки"	, 1);
	ПараметрыЗапроса.Вставить("Заголовки"					, Заголовки);
	ПараметрыЗапроса.Вставить("ИмяФайлаОтвета"				, Неопределено);
	ПараметрыЗапроса.Вставить("Таймаут"						, -1);
	ПараметрыЗапроса.Вставить("НастройкиПрокси"				, Неопределено);
	
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URL, , , ПараметрыЗапроса);
	
КонецФункции

#КонецОбласти