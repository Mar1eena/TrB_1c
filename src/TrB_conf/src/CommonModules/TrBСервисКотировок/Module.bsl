#Область СлужебныйПрограммныйИнтерфейс
// Метод запроса исторических свечей по инструменту.
//  
// Параметры:
// Figi - Строка - Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
// From - Дата - Начало запрашиваемого периода в часовом поясе UTC.
// Too - Дата - Окончание запрашиваемого периода в часовом поясе UTC.
// Interval - ПеречислениеСсылка.TrBCandleInterval - Интервал запрошенных свечей.
// InstrumentId - Строка - Идентификатор инструмента, принимает значение figi или instrument_uid.
//  Песочница - Булево - Ложь, если это не песочница.
//  
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция GetCandles(Figi, From, Too, Interval, InstrumentId, Песочница = Ложь) Экспорт

	URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("Figi", Figi);
	ПараметрыТелаЗапроса.Вставить("From", From);
	ПараметрыТелаЗапроса.Вставить("Too", Too);
	ПараметрыТелаЗапроса.Вставить("Interval", Interval);
	ПараметрыТелаЗапроса.Вставить("InstrumentId", InstrumentId);
	
	ТелоЗапроса = "{
					|figi: [Figi],
					|from: [From],
					|to: [Too],
					|interval: [Interval],
					|instrumentId: [InstrumentId]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = TrBЗапросыTinkoff.ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Возврат Ответ;
	
КонецФункции

// Метод запроса цен закрытия торговой сессии по инструментам.
//  
// Параметры:
//  Instruments - Массив из Строка - Массив по инструментам со строкой figi.
//  
//  Песочница - Булево - Ложь, если это не песочница.
//  
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция GetClosePrices(Instruments, Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest//tinkoff.public.invest.api.contract.v1.MarketDataService/GetClosePrices";
	
	InstrumentId = "";
	
	Для каждого Элемент Из Instruments Цикл
		
		ПараметрИнструмента = Новый Структура("InstrumentId", Элемент);
		
		InstrumentId = 	"{ 
					|instrumentId : [InstrumentId]
					|}," + InstrumentId;
		МассивИнструментов = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(InstrumentId, ПараметрИнструмента);
		
	КонецЦикла;
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("Instruments", Лев(МассивИнструментов, СтрДлина(МассивИнструментов) - 1));
	
	ТелоЗапроса = "{
					|instruments: [[Instruments]]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = TrBЗапросыTinkoff.ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Возврат Ответ;
	
КонецФункции

// Метод запроса цен последних сделок по инструментам.
//  
// Параметры:
//  МассивFigi			- Массив из Строка - Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
//  МассивInstrument_id	- Массив из Строка - Массив идентификаторов инструмента, принимает значения figi или instrument_uid.
//  Песочница - Булево - Ложь, если это не песочница.
//  
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция GetLastPrices(МассивFigi, МассивInstrument_id, Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices";
	
	Figi = "";
	
	Для каждого Элемент Из МассивFigi Цикл
		
		ПараметрИнструмента = Новый Структура("Figi", Элемент);
		
		Figi = 	"[figi]," + Figi;
		МассивFigi = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Figi, ПараметрИнструмента);
		
	КонецЦикла;
	
	Instrument_id = "";
	
	Для каждого Элемент Из МассивInstrument_id Цикл
		
		ПараметрИнструмента = Новый Структура("МассивInstrument_id", Элемент);
		
		Instrument_id = 	"[InstrumentId]," + Instrument_id;
		МассивInstrument_id = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Instrument_id, ПараметрИнструмента);
		
	КонецЦикла;
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("Figi", Лев(МассивFigi, СтрДлина(МассивFigi) - 1));
	ПараметрыТелаЗапроса.Вставить("InstrumentId", Лев(МассивInstrument_id, СтрДлина(МассивInstrument_id) - 1));
	
	ТелоЗапроса = "{
					|figi: [[Figi]]
					|instrumentId: [[InstrumentId]]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = TrBЗапросыTinkoff.ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Возврат Ответ;
	
КонецФункции

// Метод запрос обезличенных сделок за последний час.
//  
// Параметры:
//  Figi - Строка - Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
//  From - Дата - Начало запрашиваемого периода в часовом поясе UTC.
//  Too - Дата - Окончание запрашиваемого периода в часовом поясе UTC.
//  InstrumentId - Строка - Идентификатор инструмента, принимает значение figi или instrument_uid.
//  Песочница - Булево - Ложь, если это не песочница.
//  
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция GetLastTrades(Figi, From, Too, InstrumentId, Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastTrades";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("Figi", Figi);
	ПараметрыТелаЗапроса.Вставить("From", From);
	ПараметрыТелаЗапроса.Вставить("Too", Too);
	ПараметрыТелаЗапроса.Вставить("InstrumentId", InstrumentId);
	
	ТелоЗапроса = "{
					|figi: [Figi],
					|from: [From],
					|to: [Too],
					|instrumentId: [InstrumentId]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = TrBЗапросыTinkoff.ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Возврат Ответ;
	
КонецФункции

// Метод получения списка фьючерсов.
//  
// Параметры:
//  Figi - Строка - Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
//  Depth - Число - Глубина стакана.
//  InstrumentId - Строка - Идентификатор инструмента, принимает значение figi или instrument_uid.
//  Песочница - Булево - Ложь, если это не песочница.
//  
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция GetOrderBook(Figi, Depth, InstrumentId, Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.MarketDataService/GetOrderBook";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("Figi", Figi);
	ПараметрыТелаЗапроса.Вставить("Depth", Depth);
	ПараметрыТелаЗапроса.Вставить("InstrumentId", InstrumentId);
	
	ТелоЗапроса = "{
					|figi: [Figi],
					|depth: [Depth],
					|instrumentId: [InstrumentId]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = TrBЗапросыTinkoff.ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Возврат Ответ;
	
КонецФункции

// Метод запрос получения торгового статуса.
//  
// Параметры:
//  Figi - Строка - Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
//  InstrumentId - Строка - Идентификатор инструмента, принимает значение figi или instrument_uid.
//  Песочница - Булево - Ложь, если это не песочница.
//  
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция GetTradingStatus(Figi, InstrumentId, Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatus";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("Figi", Figi);
	ПараметрыТелаЗапроса.Вставить("InstrumentId", InstrumentId);
	
	ТелоЗапроса = "{
					|figi: [Figi],
					|instrumentId: [InstrumentId]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = TrBЗапросыTinkoff.ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Возврат Ответ;
	
КонецФункции

// Метод запрос получения торгового статуса.
//  
// Параметры:
//  МассивInstrument_id - Массив из Строка - Массив идентификаторов инструмента, принимает значение figi или instrument_uid.
//  Песочница - Булево - Ложь, если это не песочница.
//  
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция GetTradingStatuses(МассивInstrument_id, Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatuses";
	
	Instrument_id = "";
	
	Для каждого Элемент Из МассивInstrument_id Цикл
		
		ПараметрИнструмента = Новый Структура("InstrumentId", Элемент);
		
		Instrument_id = "[instrumentId]," + Instrument_id;
		МассивInstrument_id = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Instrument_id, ПараметрИнструмента);
		
	КонецЦикла;
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("InstrumentId", Лев(МассивInstrument_id, СтрДлина(МассивInstrument_id) - 1));
	
	ТелоЗапроса = "{instrumentId: [
					|[instrumentId]
					|]
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = TrBЗапросыTinkoff.ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Возврат Ответ;
	
КонецФункции

// Метод получения списка фьючерсов.
//  
// Параметры:
//  Instruments - Массив из Строка - Массив инструментов, где элемент - строка Figi
//  ActionType - ПеречислениеСсылка.TrBEditFavoritesActionType - Тип действия со списком избранных инструментов
//  IdType - ПеречислениеСсылка.TrBInstrumentIdType - Тип идентификатора инструмента. Возможные значения: figi, ticker
//  ClassCode - Строка - Идентификатор class_code. Обязателен при id_type = ticker.
//  Idd - Строка - Идентификатор запрашиваемого инструмента.
//  IdType - ПеречислениеСсылка.TrBInstrumentIdType - Тип идентификатора инструмента. Возможные значения: figi, ticker
//  ClassCode - Строка - Идентификатор class_code. Обязателен при id_type = ticker.
//  Idd - Строка - Идентификатор запрашиваемого инструмента.
//  Query - Строка - Figi акции
//  InstrumentKind - ПеречислениеСсылка.TrBInstrumentType - Тип инструмента
//  ApiTradeAvailableFlag - Булево - Фильтр для отображения только торговых инструментов.
//  InstrumentStatus - ПеречислениеСсылка.TrBItrumentStatus - Статус запрашиваемых инструментов
//  Песочница - Булево - Ложь, если это не песочница.
//  
// Возвращаемое значение:
//  Произвольный - Массив структур ответа данного запроса
//  
Функция ЛюбаяФункци(Песочница = Ложь) Экспорт
	
	URL = "https://invest-public-api.tinkoff.ru/rest/";
	
	ПараметрыТелаЗапроса = Новый Структура();
	ПараметрыТелаЗапроса.Вставить("", "");
	
	ТелоЗапроса = "{
					|idType: [],
					|classCode: [],
					|id: []
					|}";
					
	ТелоЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТелоЗапроса, ПараметрыТелаЗапроса);
	
	Ответ = TrBЗапросыTinkoff.ЗапросВТинькоффИнвестиции(URL, ТелоЗапроса, Песочница);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти