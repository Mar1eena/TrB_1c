// @strict-types


#Область ПрограммныйИнтерфейс

// Преобразует строку в формате JSON в структуру. 
//
// Параметры:
//  СтрокаJSON - Строка - строка в формате JSON.
// Возвращаемое значение:
//  Структура - структура, полученная из строки в формате JSON.
//
Функция СтрокаJsonВСтруктуру(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);

	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);

	Возврат СтруктураJSON;
	
КонецФункции

// Соответствие в структуру.
// 
// Параметры:
//  Соответствие - Соответствие из КлючИЗначение:
//				* Ключ - Произвольный, Строка - Произвольный
//				* Значение - Соответствие из КлючИЗначение:
//							** Ключ - Произвольный,
//							** Значение - Произвольный - Произвольный
//  Структура - Структура - Конечная структура из соответствия
// 
Процедура СоответствиеВСтруктуру(Соответствие, Структура) Экспорт
	Для Каждого текЭлемент Из Соответствие Цикл
		Ключ = КлючИзСоответствияДляСтруктуры(текЭлемент.Ключ);
		Если ТипЗнч(текЭлемент.Значение) = Тип("Соответствие") Тогда
			ВложеннаяСтруктура = Новый Структура;
			СоответствиеВСтруктуру(текЭлемент.Значение, ВложеннаяСтруктура);
			Структура.Вставить(Ключ, ВложеннаяСтруктура);
		Иначе
			Если Ключ = "" Тогда
				Ключ = "URLServer";
			КонецЕсли;
			Структура.Вставить(Ключ, текЭлемент.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// TODO: РАСПАРСИТЬ МАССИВ СООТВЕТСТВИЙ
// Сглаживание соответствия.
// 
// Параметры:
//  ИсходноеСоответствие - Соответствие из КлючИЗначение:
//   * ПрефиксКлюча - Произвольный, Строка - Произвольный
//   * Значение - Соответствие из КлючИЗначение:
//					** Ключ - Произвольный,
//					** Значение - Произвольный - Произвольный
//  НовоеСоответствие - Соответствие из КлючИЗначение:
//   * ПрефиксКлюча - Произвольный, Строка - Произвольный
//   * Значение - Произвольный - Произвольный
//  ПрефиксКлюча - Строка - Новый ключ
//  УникальныйИдентификатор - Строка - Уникальный идентификатор
Процедура СглаживаниеСоответствия(ИсходноеСоответствие,
								  НовоеСоответствие,
								  ПрефиксКлюча = "",
								  УникальныйИдентификатор = "") Экспорт
	Для Каждого Элемент Из ИсходноеСоответствие Цикл
		ТекущийКлюч = ?(ПрефиксКлюча = "", Элемент.Ключ, ПрефиксКлюча + "." + Элемент.Ключ);
		Если ТипЗнч(Элемент.Значение) = Тип("Соответствие") Тогда
			Если Элемент.Значение.Количество() > 0 Тогда
				СглаживаниеСоответствия(Элемент.Значение, НовоеСоответствие, ТекущийКлюч);
			Иначе
				НовоеСоответствие.Вставить(ТекущийКлюч, Элемент.Значение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Для Каждого текЭлемент Из Элемент.Значение Цикл
				УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
				ТекущийКлюч = ТекущийКлюч + "." + УникальныйИдентификатор;
				Если ТипЗнч(текЭлемент) = Тип("Соответствие") Тогда
					СглаживаниеСоответствия(текЭлемент, НовоеСоответствие, ТекущийКлюч, УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
		Иначе
			НовоеСоответствие.Вставить(ТекущийКлюч, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Соответствие ключа структуре.
// 
// Параметры:
//  КлючСоответствия - Строка - Ключ соответствия
// 
// Возвращаемое значение:
//  Строка - Ключ из соответствия для структуры
Функция КлючИзСоответствияДляСтруктуры(Знач КлючСоответствия) Экспорт
	НедопустимыеСимволы = "'`/\[]{}:;|=?*<>,.()+#№@!%^&~";
	Возврат СтрСоединить(СтрРазделить(КлючСоответствия, НедопустимыеСимволы, Истина));
КонецФункции

#КонецОбласти
